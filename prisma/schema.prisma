// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  fullname String
  username String @unique
  email    String @unique
  password String

  userQuestions UserQuestion[]

  @@map("users")
}

model UserQuestion {
  id String @id @default(uuid())

  tries         Int
  correct       Boolean
  userId        String
  questionId    String
  alternativeId String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  alternative Alternative @relation(fields: [alternativeId], references: [id], onDelete: Cascade)

  @@map("userquestions")
}

model Subject {
  id String @id @default(uuid())

  name String

  questionSubjects QuestionSubject[]

  @@map("subjects")
}

model QuestionSubject {
  id String @id @default(uuid())

  subjectId  String?
  questionId String?

  Subject  Subject?  @relation(fields: [subjectId], references: [id])
  Question Question? @relation(fields: [questionId], references: [id])

  @@map("questionsubject")
}

model Question {
  id String @id @default(uuid())

  image_url        String?
  content          String
  level            Int
  alternatives     Alternative[]
  userQuestions    UserQuestion[]
  questionSubjects QuestionSubject[]

  @@map("questions")
}

model Alternative {
  id String @id @default(uuid())

  text        String
  value       Boolean
  question_id String

  question Question @relation(fields: [question_id], references: [id], onDelete: Cascade)

  answered_questions UserQuestion[]

  @@map("alternatives")
}
